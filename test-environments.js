#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç —Ä–∞–±–æ—Ç—ã –≤ —Ä–∞–∑–Ω—ã—Ö —Ä–µ–∂–∏–º–∞—Ö
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–∞–±–æ—Ç–∞—é—Ç –≤ DEV –∏ PRODUCTION
 */

async function testEnvironments() {
  console.log('üåç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –≤ —Ä–∞–∑–Ω—ã—Ö —Ä–µ–∂–∏–º–∞—Ö...\n');

  try {
    // Test in development mode
    console.log('1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ä–µ–∂–∏–º–µ DEVELOPMENT...');
    const devResponse = await fetch('http://localhost:10112/api/stats/enhanced');

    if (devResponse.ok) {
      const devData = await devResponse.json();
      console.log('‚úÖ DEV —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç–∞–µ—Ç');
      console.log(`   - –†–µ–∂–∏–º: ${process.env.NODE_ENV || 'development'}`);
      console.log(`   - –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: ${devData.data.isRealData ? '–î–∞' : '–ù–µ—Ç'}`);
      console.log(`   - –ò—Å—Ç–æ—á–Ω–∏–∫: ${devData.data.dataSource}`);
      console.log(`   - –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${devData.data.totalUsers}`);
    } else {
      console.log('‚ùå DEV —Ä–µ–∂–∏–º –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
    }

    console.log('');

    // Test all stats endpoints
    console.log('2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...');

    const endpoints = [
      { name: 'Enhanced Stats', url: '/api/stats/enhanced' },
      { name: 'Fake Stats', url: '/api/stats/fake' },
      { name: 'Simple Stats', url: '/api/stats/simple' }
    ];

    for (const endpoint of endpoints) {
      try {
        const response = await fetch(`http://localhost:10112${endpoint.url}`);
        if (response.ok) {
          const data = await response.json();
          console.log(`‚úÖ ${endpoint.name}:`);
          console.log(`   - –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: ${data.data.isRealData ? '–î–∞' : '–ù–µ—Ç'}`);
          console.log(`   - –ò—Å—Ç–æ—á–Ω–∏–∫: ${data.data.dataSource}`);

          if (data.data.isRealData) {
            console.log(`   ‚ùå –û–®–ò–ë–ö–ê: ${endpoint.name} –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!`);
          } else {
            console.log(`   ‚úÖ ${endpoint.name} –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ`);
          }
        } else {
          console.log(`‚ùå ${endpoint.name} –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç (${response.status})`);
        }
      } catch (error) {
        console.log(`‚ùå ${endpoint.name} –æ—à–∏–±–∫–∞: ${error.message}`);
      }
      console.log('');
    }

    console.log('üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç:');
    console.log('–í—Å–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–æ–ª–∂–Ω—ã –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –ª—é–±–æ–º —Ä–µ–∂–∏–º–µ');
    console.log('isRealData –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å false, dataSource –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å "calculated"');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
  }
}

// Run the test
testEnvironments().catch(console.error);
