const axios = require('axios');

const API_BASE = 'http://localhost:10112/api';

async function testWithRealUser() {
  try {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º...\n');

    // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –±–∞–ª–∞–Ω—Å–æ–º
    console.log('1. –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –±–∞–ª–∞–Ω—Å–æ–º...');

    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω API
    try {
      const usersResponse = await axios.get(`${API_BASE}/admin/users?limit=5`);
      console.log('–ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', usersResponse.data.data.users.length);

      const usersWithBalance = usersResponse.data.data.users.filter(user => user.balance >= 3);
      console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –±–∞–ª–∞–Ω—Å–æ–º >= 3 NON:', usersWithBalance.length);

      if (usersWithBalance.length > 0) {
        const testUser = usersWithBalance[0];
        console.log(`–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: ${testUser.telegramId} (–±–∞–ª–∞–Ω—Å: ${testUser.balance} NON)`);
        await testInvestmentFlow(testUser.telegramId);
      } else {
        console.log('–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
        console.log('–ü–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
        await createTestUser();
      }
    } catch (error) {
      console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è)');
      console.log('–ü–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
      await createTestUser();
    }

  } catch (error) {
    console.error('‚ùå –¢–µ—Å—Ç –Ω–µ —É–¥–∞–ª—Å—è:', error.response?.data || error.message);
  }
}

async function createTestUser() {
  try {
    console.log('\n2. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');

    // –ü–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ API —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    const testUserData = {
      id: '999999999',
      username: 'testuser',
      first_name: 'Test',
      last_name: 'User'
    };

    try {
      const registerResponse = await axios.post(`${API_BASE}/auth/register`, testUserData);
      console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω:', registerResponse.data);

      // –î–æ–±–∞–≤–∏–º –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω API
      try {
        const addBalanceResponse = await axios.post(`${API_BASE}/admin/users/${registerResponse.data.user.id}/balance`, {
          action: 'add',
          amount: 10
        });
        console.log('‚úÖ –ë–∞–ª–∞–Ω—Å –¥–æ–±–∞–≤–ª–µ–Ω:', addBalanceResponse.data);

        await testInvestmentFlow(registerResponse.data.user.telegramId);
      } catch (balanceError) {
        console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å (—Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–¥–º–∏–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è)');
        console.log('–ü–æ–ø—Ä–æ–±—É–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –±–∞–ª–∞–Ω—Å–æ–º...');
        await testInvestmentFlow(registerResponse.data.user.telegramId);
      }
    } catch (registerError) {
      console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', registerError.response?.data?.error || registerError.message);
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error.message);
  }
}

async function testInvestmentFlow(telegramId) {
  try {
    console.log(`\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramId}...`);

    console.log('1. –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
    const initialData = await axios.get(`${API_BASE}/user/${telegramId}/data?bypassCache=true`);
    console.log('–ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å:', initialData.data.availableBalance);

    if (initialData.data.availableBalance < 3) {
      console.log('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
      console.log('–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:', initialData.data.availableBalance);
      console.log('–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 3 NON');
      return;
    }

    console.log('\n2. –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–ª–æ—Ç–∞...');
    const investmentResponse = await axios.post(`${API_BASE}/user/${telegramId}/invest`, {
      amount: 3
    });
    console.log('‚úÖ –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞:', investmentResponse.data);

    console.log('\n3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞...');
    const updatedData = await axios.get(`${API_BASE}/user/${telegramId}/data?bypassCache=true`);
    console.log('–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å:', updatedData.data.availableBalance);

    const expectedBalance = initialData.data.availableBalance - 3;
    const actualBalance = updatedData.data.availableBalance;

    console.log('\n4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...');
    console.log('–û–∂–∏–¥–∞–µ–º—ã–π –±–∞–ª–∞–Ω—Å:', expectedBalance);
    console.log('–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –±–∞–ª–∞–Ω—Å:', actualBalance);

    if (Math.abs(actualBalance - expectedBalance) < 0.001) {
      console.log('‚úÖ –ë–ê–õ–ê–ù–° –û–ë–ù–û–í–ò–õ–°–Ø –ö–û–†–†–ï–ö–¢–ù–û!');
      console.log('‚úÖ –ü—Ä–æ–±–ª–µ–º–∞ —Ä–µ—à–µ–Ω–∞!');
    } else {
      console.log('‚ùå –ë–ê–õ–ê–ù–° –ù–ï –û–ë–ù–û–í–ò–õ–°–Ø –ö–û–†–†–ï–ö–¢–ù–û!');
      console.log('‚ùå –ü—Ä–æ–±–ª–µ–º–∞ –ù–ï —Ä–µ—à–µ–Ω–∞!');
      console.log('–†–∞–∑–Ω–∏—Ü–∞:', Math.abs(actualBalance - expectedBalance));
    }

    console.log('\n5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤...');
    const slotsResponse = await axios.get(`${API_BASE}/user/${telegramId}/myslots`);
    console.log('–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–ª–æ—Ç—ã:', slotsResponse.data.slots.filter(s => s.status === 'active').length);
    console.log('–û–±—â–∞—è —Å—É–º–º–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π:', slotsResponse.data.slots.reduce((sum, slot) => sum + slot.principal, 0));

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.response?.data || error.message);
  }
}

testWithRealUser();
