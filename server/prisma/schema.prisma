generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                                 String            @id @default(cuid())
  telegramId                         String            @unique
  username                           String?
  firstName                          String?
  lastName                           String?
  avatarUrl                          String?
  role                               UserRole          @default(USER)
  createdAt                          DateTime          @default(now())
  updatedAt                          DateTime          @updatedAt
  lastSeenAt                         DateTime?
  referralCode                       String            @unique
  referredById                       String?
  totalInvested                      Float             @default(0)
  lastDepositAt                      DateTime?
  lastWithdrawalAt                   DateTime?
  lastSlotPurchaseAt                 DateTime?
  captchaValidated                   Boolean           @default(false)
  lastReferralZeroPenaltyAppliedAt   DateTime?
  isSuspicious                       Boolean           @default(false)
  lastSuspiciousPenaltyAppliedAt     DateTime?
  rank                               String?
  lastInvestmentGrowthBonusClaimedAt DateTime?
  isOnline                           Boolean           @default(false)
  permissions                        String[]          @default([])
  managedBy                          String?
  activityScore                      Float             @default(0)
  firstWithdrawalAt                  DateTime?
  frozenAt                           DateTime?
  frozenReason                       String?
  hasMadeDeposit                     Boolean           @default(false)
  isActive                           Boolean           @default(true)
  isFrozen                           Boolean           @default(false)
  lastActivityAt                     DateTime?
  lastLotteryTicketAt                DateTime?
  totalEarnings                      Float             @default(0)
  totalWithdrawn                     Float             @default(0)
  accountFreezes                     AccountFreeze[]
  activityLogs                       ActivityLog[]
  completedTasks                     CompletedTask[]
  investments                        Investment[]
  lotteryTickets                     LotteryTicket[]
  miningSlots                        MiningSlot[]
  notifications                      Notification[]
  referralEarnings                   ReferralEarning[]
  swapTransactions                   SwapTransaction[]
  referredBy                         User?             @relation("UserReferrals", fields: [referredById], references: [id], onDelete: NoAction, onUpdate: NoAction)
  referrals                          User[]            @relation("UserReferrals")
  wallets                            Wallet[]
  withdrawals                        Withdrawal[]
  payments                           Payment[]
  transactions                       Transaction[]

  @@index([referredById])
  @@index([telegramId])
  @@index([createdAt])
  @@index([lastSeenAt])
  @@index([role])
  @@index([isSuspicious])
  @@index([totalInvested])
  @@index([isOnline])
  @@index([managedBy])
  @@index([isActive])
  @@index([isFrozen])
  @@index([activityScore])
  @@index([lastActivityAt])
}

model Wallet {
  id        String   @id @default(cuid())
  userId    String
  currency  String
  balance   Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  frozen    Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([frozen])
}

model MiningSlot {
  id                  String   @id @default(cuid())
  userId              String
  principal           Float
  startAt             DateTime @default(now())
  lastAccruedAt       DateTime
  effectiveWeeklyRate Float
  expiresAt           DateTime
  isActive            Boolean  @default(true)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  type                String   @default("standard")
  isLocked            Boolean  @default(false)
  accruedEarnings     Float    @default(0)
  user                User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([isActive])
  @@index([expiresAt])
  @@index([createdAt])
  @@index([type])
  @@index([userId, isActive])
  @@index([isLocked])
}

model Task {
  id          String          @id @default(cuid())
  taskId      String          @unique
  title       String
  description String
  reward      Float
  link        String
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @default(now()) @updatedAt
  isActive    Boolean         @default(true)
  completedBy CompletedTask[]

  @@index([isActive])
}

model CompletedTask {
  userId    String
  taskId    String
  createdAt DateTime @default(now())
  task      Task     @relation(fields: [taskId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@id([userId, taskId])
}

model ActivityLog {
  id           String          @id @default(cuid())
  userId       String
  type         ActivityLogType
  amount       Float
  description  String
  createdAt    DateTime        @default(now())
  sourceUserId String?
  ipAddress    String?
  userAgent    String?
  user         User            @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([type])
  @@index([createdAt])
  @@index([userId, type])
  @@index([userId, createdAt])
}

model Lottery {
  id             String          @id @default(cuid())
  drawDate       DateTime
  jackpot        Float
  isDrawn        Boolean         @default(false)
  winningNumbers String?
  createdAt      DateTime        @default(now())
  tickets        LotteryTicket[]
}

model LotteryTicket {
  id              String   @id @default(cuid())
  userId          String
  lotteryId       String
  numbers         String
  isWinner        Boolean  @default(false)
  prizeAmount     Float?
  isAdminSelected Boolean  @default(false)
  createdAt       DateTime @default(now())
  lottery         Lottery  @relation(fields: [lotteryId], references: [id])
  user            User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([lotteryId])
}

model ExchangeRate {
  id        String   @id @default(cuid())
  rate      Float
  isActive  Boolean  @default(true)
  createdBy String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SwapTransaction {
  id           String   @id @default(cuid())
  userId       String
  exchangeRate Float
  createdAt    DateTime @default(now())
  MNEAmount    Float
  USDAmount    Float
  user         User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([createdAt])
  @@index([userId, createdAt])
}

model Notification {
  id            String    @id @default(cuid())
  userId        String
  type          String
  title         String
  message       String
  isRead        Boolean   @default(false)
  createdAt     DateTime  @default(now())
  attempts      Int       @default(0)
  error         String?
  lastAttemptAt DateTime?
  metadata      Json?
  priority      String    @default("normal")
  scheduledFor  DateTime?
  status        String    @default("PENDING")
  updatedAt     DateTime  @updatedAt
  user          User      @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([isRead])
  @@index([createdAt])
  @@index([userId, isRead])
  @@index([status])
  @@index([priority])
}

model Investment {
  id             String           @id @default(cuid())
  userId         String
  amount         Float
  type           InvestmentType
  status         InvestmentStatus @default(ACTIVE)
  startDate      DateTime         @default(now())
  endDate        DateTime
  expectedReturn Float
  actualReturn   Float            @default(0)
  weeklyRate     Float
  isLocked       Boolean          @default(true)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  user           User             @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([status])
  @@index([endDate])
  @@index([isLocked])
}

model Withdrawal {
  id              String           @id @default(cuid())
  userId          String
  amount          Float
  currency        String
  status          WithdrawalStatus @default(PENDING)
  type            WithdrawalType
  adminApproved   Boolean          @default(false)
  adminId         String?
  processedAt     DateTime?
  rejectedAt      DateTime?
  rejectionReason String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  user            User             @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([status])
  @@index([createdAt])
}

model ReferralEarning {
  id           String              @id @default(cuid())
  userId       String
  sourceUserId String
  amount       Float
  type         ReferralEarningType
  level        Int
  isCapped     Boolean             @default(false)
  createdAt    DateTime            @default(now())
  user         User                @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([sourceUserId])
  @@index([type])
}

model DailyPayout {
  id             String              @id @default(cuid())
  date           DateTime            @unique
  totalAmount    Float
  totalUsers     Int
  processedUsers Int                 @default(0)
  status         PayoutStatus        @default(PENDING)
  processedAt    DateTime?
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  details        DailyPayoutDetail[]

  @@index([date])
  @@index([status])
}

model DailyPayoutDetail {
  id           String      @id @default(cuid())
  payoutId     String
  userId       String
  amount       Float
  investmentId String?
  processed    Boolean     @default(false)
  processedAt  DateTime?
  createdAt    DateTime    @default(now())
  payout       DailyPayout @relation(fields: [payoutId], references: [id])

  @@index([payoutId])
  @@index([userId])
}

model AccountFreeze {
  id          String       @id @default(cuid())
  userId      String
  reason      FreezeReason
  duration    Int?
  frozenAt    DateTime     @default(now())
  unfrozenAt  DateTime?
  adminId     String
  description String?
  isActive    Boolean      @default(true)
  user        User         @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([isActive])
  @@index([frozenAt])
}

enum UserRole {
  USER
  ADMIN
  MANAGER
  STAFF
}

enum InvestmentType {
  WELCOME_BONUS
  STANDARD
  PREMIUM
  REFERRAL_BONUS
}

enum InvestmentStatus {
  ACTIVE
  COMPLETED
  CANCELLED
  FROZEN
}

enum WithdrawalStatus {
  PENDING
  APPROVED
  PROCESSED
  REJECTED
  CANCELLED
}

enum WithdrawalType {
  FIRST_WITHDRAWAL
  REGULAR_WITHDRAWAL
  EMERGENCY_WITHDRAWAL
}

enum ReferralEarningType {
  SIGNUP_BONUS
  DEPOSIT_COMMISSION
  EARNINGS_COMMISSION
  ACTIVITY_BONUS
}

enum PayoutStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum FreezeReason {
  INACTIVITY
  SUSPICIOUS_ACTIVITY
  VIOLATION_TERMS
  ADMIN_DECISION
  SYSTEM_DETECTED
}

enum ActivityLogType {
  DEPOSIT
  WITHDRAWAL
  CLAIM
  NEW_SLOT_PURCHASE
  SLOT_EXTENSION
  REFERRAL_SIGNUP_BONUS
  REFERRAL_COMMISSION
  REFERRAL_DEPOSIT_BONUS
  TASK_REWARD
  DAILY_BONUS
  WELCOME_BONUS
  REINVESTMENT
  LEADERBOARD_BONUS
  INVESTMENT_GROWTH_BONUS
  DIVIDEND_BONUS
  REFERRAL_3_IN_3_DAYS_BONUS
  BALANCE_ZEROED_PENALTY
  BALANCE_FROZEN_PENALTY
  LOTTERY_TICKET_PURCHASE
  LOTTERY_WIN
  SWAP_USD_TO_MNE
  EXCHANGE_RATE_CHANGE
  ADMIN_LOTTERY_WIN
  LOGIN
  LOGOUT
  INVESTMENT_CREATED
  INVESTMENT_COMPLETED
  WITHDRAWAL_REQUESTED
  WITHDRAWAL_APPROVED
  WITHDRAWAL_REJECTED
  REFERRAL_EARNED
  ACCOUNT_FROZEN
  ACCOUNT_UNFROZEN
  PASSWORD_CHANGED
  PROFILE_UPDATED
  ADMIN_ACTION
  EARNINGS
  REFERRAL
  BONUS
}

model Payment {
  id          String      @id @default(cuid())
  orderId     String      @unique
  paymentId   String?     @unique
  userId      String
  amount      Float
  currency    String      @default("USD")
  description String
  status      PaymentStatus @default(PENDING)
  paymentMethod String    @default("amerpay")
  paymentUrl  String?
  refundReason String?
  metadata    Json?
  transactionHash String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("payments")
}

model Transaction {
  id          String            @id @default(cuid())
  userId      String
  type        TransactionType
  amount      Float
  currency    String            @default("USD")
  description String
  status      TransactionStatus @default(PENDING)
  referenceId String?           // Reference to payment, withdrawal, etc.
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("transactions")
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
  CANCELLED
}

enum TransactionType {
  DEPOSIT
  WITHDRAWAL
  REFERRAL_BONUS
  MINING_EARNINGS
  LOTTERY_WIN
  ADMIN_ADJUSTMENT
  REFUND
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}
