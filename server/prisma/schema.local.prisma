generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                                 String            @id @default(cuid())
  telegramId                         String            @unique
  username                           String?
  firstName                          String?
  lastName                           String?
  avatarUrl                          String?
  role                               UserRole          @default(USER)
  createdAt                          DateTime          @default(now())
  updatedAt                          DateTime          @updatedAt
  lastSeenAt                         DateTime?
  referralCode                       String            @unique
  referredById                       String?
  totalInvested                      Float             @default(0)
  lastDepositAt                      DateTime?
  lastWithdrawalAt                   DateTime?
  lastSlotPurchaseAt                 DateTime?
  captchaValidated                   Boolean           @default(false)
  lastReferralZeroPenaltyAppliedAt   DateTime?
  isSuspicious                       Boolean           @default(false)
  lastSuspiciousPenaltyAppliedAt     DateTime?

  // Relations
  wallets                            Wallet[]
  miningSlots                        MiningSlot[]
  referrals                          User[]            @relation("UserReferrals")
  referredBy                         User?             @relation("UserReferrals", fields: [referredById], references: [id])
  activityLogs                       ActivityLog[]
  lotteryTickets                     LotteryTicket[]
  withdrawals                        Withdrawal[]
  deposits                           Deposit[]
  achievements                       UserAchievement[]
  bonuses                            Bonus[]

  @@map("User")
}

model Wallet {
  id        String   @id @default(cuid())
  userId    String
  currency  String   @default("USD")
  balance   Float    @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, currency])
  @@map("Wallet")
}

model MiningSlot {
  id                   String    @id @default(cuid())
  userId               String
  principal            Float
  startAt              DateTime
  lastAccruedAt        DateTime
  effectiveWeeklyRate  Float
  expiresAt            DateTime
  isActive             Boolean   @default(true)
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("MiningSlot")
}

model ActivityLog {
  id          String         @id @default(cuid())
  userId      String
  type        ActivityLogType
  amount      Float?
  description String?
  createdAt   DateTime       @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("ActivityLog")
}

model Task {
  taskId          String @id
  title           String
  description     String
  reward          Float
  isActive        Boolean @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("Task")
}

model LotteryTicket {
  id              String   @id @default(cuid())
  userId          String
  ticketNumber    Int
  isWinner        Boolean  @default(false)
  isAdminSelected Boolean  @default(false)
  createdAt       DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("LotteryTicket")
}

model Withdrawal {
  id          String           @id @default(cuid())
  userId      String
  amount      Float
  currency    String           @default("USD")
  status      WithdrawalStatus @default(PENDING)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("Withdrawal")
}

model Deposit {
  id        String   @id @default(cuid())
  userId    String
  amount    Float
  currency  String   @default("USD")
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("Deposit")
}

model UserAchievement {
  id            String      @id @default(cuid())
  userId        String
  achievementId String
  unlockedAt    DateTime    @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
  @@map("UserAchievement")
}

model Bonus {
  id          String   @id @default(cuid())
  userId      String
  amount      Float
  type        String
  description String?
  createdAt   DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("Bonus")
}

model ExchangeRate {
  id        String   @id @default(cuid())
  rate      Float
  isActive  Boolean  @default(true)
  createdBy String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("ExchangeRate")
}

enum UserRole {
  USER
  ADMIN
  MODERATOR
}

enum ActivityLogType {
  WELCOME_BONUS
  REFERRAL_SIGNUP_BONUS
  REFERRAL_EARNINGS_BONUS
  DAILY_BONUS
  TASK_COMPLETION
  LOTTERY_WIN
  SLOT_PURCHASE
  DEPOSIT
  WITHDRAWAL
  INVESTMENT_GROWTH
  DIVIDENDS_BONUS
  LEADERBOARD_BONUS
  ACHIEVEMENT_UNLOCK
}

enum WithdrawalStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
}


