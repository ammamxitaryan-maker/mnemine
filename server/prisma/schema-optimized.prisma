// Оптимизированная схема для системы инвестиций
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Пользователи
model User {
  id                String   @id @default(cuid())
  telegramId        String   @unique
  username          String?
  firstName         String?
  lastName          String?
  avatarUrl         String?
  role              UserRole @default(USER)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  lastSeenAt        DateTime?
  lastActivityAt    DateTime? // Последняя активность
  isActive          Boolean  @default(true) // Активен ли пользователь
  isFrozen          Boolean  @default(false) // Заморожен ли аккаунт
  frozenAt          DateTime? // Когда заморожен
  frozenReason      String? // Причина заморозки
  
  // Реферальная система
  referralCode      String   @unique
  referredById      String?
  referredBy        User?    @relation("UserReferrals", fields: [referredById], references: [id])
  referrals         User[]   @relation("UserReferrals")
  
  // Финансы
  totalInvested     Float    @default(0)
  totalEarnings     Float    @default(0)
  totalWithdrawn    Float    @default(0)
  firstWithdrawalAt DateTime? // Дата первого вывода
  hasMadeDeposit    Boolean  @default(false) // Делал ли депозит
  
  // Активность
  activityScore     Float    @default(0) // Очки активности
  lastDepositAt     DateTime?
  lastSlotPurchaseAt DateTime?
  lastLotteryTicketAt DateTime?
  
  // Связи
  wallets           Wallet[]
  investments       Investment[]
  withdrawals       Withdrawal[]
  notifications     Notification[]
  activityLogs      ActivityLog[]
  referralEarnings  ReferralEarning[]
  
  @@index([telegramId])
  @@index([isActive])
  @@index([isFrozen])
  @@index([activityScore])
  @@index([lastActivityAt])
}

// Кошельки
model Wallet {
  id        String   @id @default(cuid())
  userId    String
  currency  Currency
  balance   Float    @default(0)
  frozen    Boolean  @default(false) // Заморожен ли кошелек
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user      User     @relation(fields: [userId], references: [id])
  
  @@index([userId])
  @@index([currency])
}

// Инвестиции
model Investment {
  id                  String   @id @default(cuid())
  userId              String
  amount              Float
  type                InvestmentType
  status              InvestmentStatus @default(ACTIVE)
  startDate           DateTime @default(now())
  endDate             DateTime
  expectedReturn      Float // Ожидаемый доход
  actualReturn        Float @default(0) // Фактический доход
  weeklyRate          Float // Недельная ставка
  isLocked            Boolean @default(true) // Заблокирован ли для вывода
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  user                User     @relation(fields: [userId], references: [id])
  
  @@index([userId])
  @@index([status])
  @@index([endDate])
  @@index([isLocked])
}

// Выводы средств
model Withdrawal {
  id              String   @id @default(cuid())
  userId          String
  amount          Float
  currency        Currency
  status          WithdrawalStatus @default(PENDING)
  type            WithdrawalType
  adminApproved   Boolean @default(false)
  adminId      String?
  processedAt     DateTime?
  rejectedAt     DateTime?
  rejectionReason String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  user            User     @relation(fields: [userId], references: [id])
  
  @@index([userId])
  @@index([status])
  @@index([createdAt])
}

// Реферальные доходы
model ReferralEarning {
  id              String   @id @default(cuid())
  userId          String
  sourceUserId    String
  amount          Float
  type            ReferralEarningType
  level           Int // Уровень реферала (1, 2, 3)
  isCapped        Boolean @default(false) // Ограничен ли балансом
  createdAt       DateTime @default(now())
  
  user            User     @relation(fields: [userId], references: [id])
  
  @@index([userId])
  @@index([sourceUserId])
  @@index([type])
}

// Курсы валют
model ExchangeRate {
  id        String   @id @default(cuid())
  fromCurrency Currency
  toCurrency   Currency
  rate        Float
  isActive    Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([fromCurrency, toCurrency])
  @@index([isActive])
}

// Уведомления
model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      NotificationType
  title     String
  message   String
  isRead    Boolean  @default(false)
  sentVia   NotificationChannel[]
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id])
  
  @@index([userId])
  @@index([isRead])
  @@index([type])
}

// Лог активности
model ActivityLog {
  id           String          @id @default(cuid())
  userId       String
  type         ActivityLogType
  amount       Float?
  description  String
  metadata     Json? // Дополнительные данные
  ipAddress    String?
  userAgent    String?
  createdAt    DateTime        @default(now())
  
  user         User            @relation(fields: [userId], references: [id])
  
  @@index([userId])
  @@index([type])
  @@index([createdAt])
}

// Ежедневные выплаты (для админ панели)
model DailyPayout {
  id              String   @id @default(cuid())
  date            DateTime @unique
  totalAmount     Float
  totalUsers      Int
  processedUsers  Int @default(0)
  status          PayoutStatus @default(PENDING)
  processedAt     DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@index([date])
  @@index([status])
}

// Детали ежедневных выплат
model DailyPayoutDetail {
  id              String   @id @default(cuid())
  payoutId        String
  userId          String
  amount          Float
  investmentId    String?
  processed       Boolean @default(false)
  processedAt     DateTime?
  createdAt       DateTime @default(now())
  
  payout          DailyPayout @relation(fields: [payoutId], references: [id])
  
  @@index([payoutId])
  @@index([userId])
}

// Система заморозки аккаунтов
model AccountFreeze {
  id              String   @id @default(cuid())
  userId          String
  reason          FreezeReason
  duration        Int? // Длительность в днях (null = навсегда)
  frozenAt        DateTime @default(now())
  unfrozenAt      DateTime?
  adminId         String
  description     String?
  isActive        Boolean @default(true)
  
  @@index([userId])
  @@index([isActive])
  @@index([frozenAt])
}

// Enums
enum UserRole {
  USER
  ADMIN
  MANAGER
  SUPPORT
}

enum Currency {
  USD
  MNE
}

enum InvestmentType {
  WELCOME_BONUS
  STANDARD
  PREMIUM
  REFERRAL_BONUS
}

enum InvestmentStatus {
  ACTIVE
  COMPLETED
  CANCELLED
  FROZEN
}

enum WithdrawalStatus {
  PENDING
  APPROVED
  PROCESSED
  REJECTED
  CANCELLED
}

enum WithdrawalType {
  FIRST_WITHDRAWAL
  REGULAR_WITHDRAWAL
  EMERGENCY_WITHDRAWAL
}

enum ReferralEarningType {
  SIGNUP_BONUS
  DEPOSIT_COMMISSION
  EARNINGS_COMMISSION
  ACTIVITY_BONUS
}

enum NotificationType {
  INVESTMENT_COMPLETED
  WITHDRAWAL_APPROVED
  WITHDRAWAL_REJECTED
  REFERRAL_JOINED
  ACCOUNT_FROZEN
  ACCOUNT_UNFROZEN
  SYSTEM_MAINTENANCE
  ADMIN_MESSAGE
}

enum NotificationChannel {
  IN_APP
  TELEGRAM
  EMAIL
  SMS
}

enum ActivityLogType {
  LOGIN
  LOGOUT
  INVESTMENT_CREATED
  INVESTMENT_COMPLETED
  WITHDRAWAL_REQUESTED
  WITHDRAWAL_APPROVED
  WITHDRAWAL_REJECTED
  REFERRAL_EARNED
  DEPOSIT_MADE
  LOTTERY_TICKET_PURCHASED
  ACCOUNT_FROZEN
  ACCOUNT_UNFROZEN
  PASSWORD_CHANGED
  PROFILE_UPDATED
}

enum PayoutStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum FreezeReason {
  INACTIVITY
  SUSPICIOUS_ACTIVITY
  VIOLATION_TERMS
  ADMIN_DECISION
  SYSTEM_DETECTED
}

// Связи для DailyPayout
model DailyPayout {
  id              String   @id @default(cuid())
  date            DateTime @unique
  totalAmount     Float
  totalUsers      Int
  processedUsers  Int @default(0)
  status          PayoutStatus @default(PENDING)
  processedAt     DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  details         DailyPayoutDetail[]
  
  @@index([date])
  @@index([status])
}

