generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                                 String            @id @default(cuid())
  telegramId                         String            @unique
  username                           String?
  firstName                          String?
  lastName                           String?
  avatarUrl                          String?
  role                               UserRole          @default(USER)
  createdAt                          DateTime          @default(now())
  updatedAt                          DateTime          @updatedAt
  lastSeenAt                         DateTime?
  referralCode                       String            @unique
  referredById                       String?
  totalInvested                      Float             @default(0)
  lastDepositAt                      DateTime?
  lastWithdrawalAt                   DateTime?
  lastSlotPurchaseAt                 DateTime?
  captchaValidated                   Boolean           @default(false)
  lastReferralZeroPenaltyAppliedAt   DateTime?
  isSuspicious                       Boolean           @default(false)
  lastSuspiciousPenaltyAppliedAt     DateTime?
  rank                               String?
  lastInvestmentGrowthBonusClaimedAt DateTime?
  isOnline                           Boolean           @default(false)
  permissions                        String[]          @default([])
  managedBy                          String?
  activityLogs                       ActivityLog[]
  completedTasks                     CompletedTask[]
  lotteryTickets                     LotteryTicket[]
  miningSlots                        MiningSlot[]
  swapTransactions                   SwapTransaction[]
  referredBy                         User?             @relation("UserReferrals", fields: [referredById], references: [id], onDelete: NoAction, onUpdate: NoAction)
  referrals                          User[]            @relation("UserReferrals")
  wallets                            Wallet[]

  @@index([referredById])
  @@index([telegramId])
  @@index([createdAt])
  @@index([lastSeenAt])
  @@index([role])
  @@index([isSuspicious])
  @@index([totalInvested])
  @@index([isOnline])
  @@index([managedBy])
}

model Wallet {
  id        String   @id @default(cuid())
  userId    String
  currency  String
  balance   Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model MiningSlot {
  id                  String   @id @default(cuid())
  userId              String
  principal           Float
  startAt             DateTime @default(now())
  lastAccruedAt       DateTime
  effectiveWeeklyRate Float
  expiresAt           DateTime
  isActive            Boolean  @default(true)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  type                String   @default("standard")
  user                User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Task {
  id          String          @id @default(cuid())
  taskId      String          @unique
  title       String
  description String
  reward      Float
  link        String
  createdAt   DateTime        @default(now())
  completedBy CompletedTask[]
}

model CompletedTask {
  userId    String
  taskId    String
  createdAt DateTime @default(now())
  task      Task     @relation(fields: [taskId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@id([userId, taskId])
}


model ActivityLog {
  id           String          @id @default(cuid())
  userId       String
  type         ActivityLogType
  amount       Float
  description  String
  createdAt    DateTime        @default(now())
  sourceUserId String?
  ipAddress    String?
  user         User            @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Lottery {
  id             String          @id @default(cuid())
  drawDate       DateTime
  jackpot        Float
  isDrawn        Boolean         @default(false)
  winningNumbers String?
  createdAt      DateTime        @default(now())
  tickets        LotteryTicket[]
}

model LotteryTicket {
  id              String   @id @default(cuid())
  userId          String
  lotteryId       String
  numbers         String
  isWinner        Boolean  @default(false)
  prizeAmount     Float?
  isAdminSelected Boolean  @default(false)
  createdAt       DateTime @default(now())
  lottery         Lottery  @relation(fields: [lotteryId], references: [id])
  user            User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([lotteryId])
}

model ExchangeRate {
  id        String   @id @default(cuid())
  rate      Float
  isActive  Boolean  @default(true)
  createdBy String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SwapTransaction {
  id           String   @id @default(cuid())
  userId       String
  USDAmount    Float
  MNEAmount   Float
  exchangeRate Float
  createdAt    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

enum UserRole {
  USER
  ADMIN
  MANAGER
  STAFF
}

enum ActivityLogType {
  DEPOSIT
  WITHDRAWAL
  CLAIM
  NEW_SLOT_PURCHASE
  SLOT_EXTENSION
  REFERRAL_SIGNUP_BONUS
  REFERRAL_COMMISSION
  REFERRAL_DEPOSIT_BONUS
  TASK_REWARD
  DAILY_BONUS
  WELCOME_BONUS
  REINVESTMENT
  LEADERBOARD_BONUS
  INVESTMENT_GROWTH_BONUS
  DIVIDEND_BONUS
  REFERRAL_3_IN_3_DAYS_BONUS
  BALANCE_ZEROED_PENALTY
  BALANCE_FROZEN_PENALTY
  LOTTERY_TICKET_PURCHASE
  LOTTERY_WIN
  SWAP_USD_TO_MNE
  EXCHANGE_RATE_CHANGE
  ADMIN_LOTTERY_WIN
}

