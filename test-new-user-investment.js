const axios = require('axios');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const BASE_URL = 'http://localhost:10112';
const FRONTEND_URL = 'http://localhost:5173';

// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π Telegram ID –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const generateRandomTelegramId = () => {
  return Math.floor(Math.random() * 900000000) + 100000000; // 9-–∑–Ω–∞—á–Ω–æ–µ —á–∏—Å–ª–æ
};

// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function createNewUser() {
  const telegramId = generateRandomTelegramId();
  console.log(`\nüÜï –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å Telegram ID: ${telegramId}`);

  try {
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—ç—Ç–æ —Å–æ–∑–¥–∞—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
    const response = await axios.get(`${BASE_URL}/api/user/${telegramId}/data`, {
      headers: {
        'X-Telegram-Init-Data': `user=${encodeURIComponent(JSON.stringify({
          id: telegramId,
          telegramId: telegramId.toString(),
          first_name: 'Test',
          last_name: 'User',
          username: `testuser${telegramId}`,
          language_code: 'ru'
        }))}&auth_date=${Math.floor(Date.now() / 1000)}`
      }
    });

    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!');
    console.log('üìä –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', JSON.stringify(response.data, null, 2));

    return { telegramId, userData: response.data };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error.response?.data || error.message);
    throw error;
  }
}

// –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
async function claimWelcomeTokens(telegramId) {
  console.log(`\nüéÅ –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramId}`);

  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –±–æ–Ω—É—Å–æ–≤
    const bonusesResponse = await axios.get(`${BASE_URL}/api/user/${telegramId}/bonuses/summary`, {
      headers: {
        'X-Telegram-Init-Data': `user=${encodeURIComponent(JSON.stringify({
          id: telegramId,
          telegramId: telegramId.toString(),
          first_name: 'Test',
          last_name: 'User',
          username: `testuser${telegramId}`,
          language_code: 'ru'
        }))}&auth_date=${Math.floor(Date.now() / 1000)}`
      }
    });

    console.log('üìã –°—Ç–∞—Ç—É—Å –±–æ–Ω—É—Å–æ–≤:', JSON.stringify(bonusesResponse.data, null, 2));

    // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å
    if (bonusesResponse.data.welcomeBonus?.available) {
      try {
        const claimResponse = await axios.post(`${BASE_URL}/api/user/${telegramId}/claim-leaderboard-bonus`, {}, {
          headers: {
            'X-Telegram-Init-Data': `user=${encodeURIComponent(JSON.stringify({
              id: telegramId,
              telegramId: telegramId.toString(),
              first_name: 'Test',
              last_name: 'User',
              username: `testuser${telegramId}`,
              language_code: 'ru'
            }))}&auth_date=${Math.floor(Date.now() / 1000)}`
          }
        });
        console.log('üéâ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å –ø–æ–ª—É—á–µ–Ω!', claimResponse.data);
      } catch {
        console.log('‚ÑπÔ∏è –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ —É–∂–µ –ø–æ–ª—É—á–µ–Ω');
      }
    }

    // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const updatedUserResponse = await axios.get(`${BASE_URL}/api/user/${telegramId}/data`, {
      headers: {
        'X-Telegram-Init-Data': `user=${encodeURIComponent(JSON.stringify({
          id: telegramId,
          telegramId: telegramId.toString(),
          first_name: 'Test',
          last_name: 'User',
          username: `testuser${telegramId}`,
          language_code: 'ru'
        }))}&auth_date=${Math.floor(Date.now() / 1000)}`
      }
    });

    console.log('üí∞ –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å:', updatedUserResponse.data.availableBalance);
    return updatedUserResponse.data;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–æ–≤:', error.response?.data || error.message);
    throw error;
  }
}

// –ò–Ω–≤–µ—Å—Ç–∏—Ä—É–µ–º –≤ —Å–ª–æ—Ç
async function investInSlot(telegramId, amount) {
  console.log(`\nüíº –ò–Ω–≤–µ—Å—Ç–∏—Ä—É–µ–º ${amount} NON –≤ —Å–ª–æ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramId}`);

  try {
    const response = await axios.post(`${BASE_URL}/api/user/${telegramId}/invest`, {
      amount: amount
    }, {
      headers: {
        'X-Telegram-Init-Data': `user=${encodeURIComponent(JSON.stringify({
          id: telegramId,
          telegramId: telegramId.toString(),
          first_name: 'Test',
          last_name: 'User',
          username: `testuser${telegramId}`,
          language_code: 'ru'
        }))}&auth_date=${Math.floor(Date.now() / 1000)}`
      }
    });

    console.log('‚úÖ –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!', response.data);
    return response.data;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.response?.data || error.message);
    throw error;
  }
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function checkBalanceAfterInvestment(telegramId) {
  console.log(`\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramId}`);

  try {
    const response = await axios.get(`${BASE_URL}/api/user/${telegramId}/data`, {
      headers: {
        'X-Telegram-Init-Data': `user=${encodeURIComponent(JSON.stringify({
          id: telegramId,
          telegramId: telegramId.toString(),
          first_name: 'Test',
          last_name: 'User',
          username: `testuser${telegramId}`,
          language_code: 'ru'
        }))}&auth_date=${Math.floor(Date.now() / 1000)}`
      }
    });

    console.log('üí∞ –§–∏–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å:', response.data.availableBalance);
    console.log('üìä –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', JSON.stringify(response.data, null, 2));
    return response.data;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞:', error.response?.data || error.message);
    throw error;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function testNewUserInvestment() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
  console.log('='.repeat(60));

  try {
    // 1. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { telegramId, userData } = await createNewUser();
    const initialBalance = userData.availableBalance;
    console.log(`üí∞ –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${initialBalance} NON`);

    // 2. –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
    const userDataAfterBonus = await claimWelcomeTokens(telegramId);
    const balanceAfterBonus = userDataAfterBonus.availableBalance;
    console.log(`üí∞ –ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –±–æ–Ω—É—Å–æ–≤: ${balanceAfterBonus} NON`);

    // 3. –ò–Ω–≤–µ—Å—Ç–∏—Ä—É–µ–º —á–∞—Å—Ç—å –±–∞–ª–∞–Ω—Å–∞
    const investmentAmount = Math.min(5, balanceAfterBonus * 0.5); // –ò–Ω–≤–µ—Å—Ç–∏—Ä—É–µ–º 50% –∏–ª–∏ –º–∞–∫—Å–∏–º—É–º 5 NON
    if (investmentAmount > 0) {
      await investInSlot(telegramId, investmentAmount);

      // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      await checkBalanceAfterInvestment(telegramId);
    } else {
      console.log('‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
    }

    console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
    console.log(`üåê –û—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä: ${FRONTEND_URL}`);
    console.log(`üì± –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Telegram ID: ${telegramId}`);

  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testNewUserInvestment();
