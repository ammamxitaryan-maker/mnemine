

# 🧭 Паспорт приложения "NONMINE - Telegram Financial Simulator"

## 1. 🧭 Название проекта
**NONMINE** - профессиональная платформа финансовой симуляции на базе Telegram с реальным временем синхронизации, продвинутой аналитикой и корпоративными функциями безопасности.

## 2. 🧩 Назначение приложения
**Основная цель:** Создание симулятора майнинга криптовалют с реферальной системой, интегрированного в Telegram WebApp для мобильных устройств.

**Ключевая логика:**
- Пользователи покупают "майнинг слоты" за виртуальную валюту (USD/NON)
- Слоты генерируют доходность 30% в неделю
- Многоуровневая реферальная система (2 уровня)
- Лотерея с ежедневными розыгрышами
- Админ-панель для управления пользователями и системой
- Реальное время обновления данных через WebSocket

## 3. 🛠️ Стек технологий

### Frontend
- **React 18** с TypeScript
- **Vite** - сборщик и dev-сервер
- **Tailwind CSS** - стилизация
- **React Query (TanStack Query)** - управление состоянием и кэширование
- **React Router v6** - маршрутизация
- **i18next** - интернационализация (EN/RU/HY)
- **Radix UI** - компоненты интерфейса
- **Lucide React** - иконки
- **Recharts** - графики и диаграммы
- **Framer Motion** - анимации

### Backend
- **Node.js** с Express и TypeScript
- **Prisma ORM** - работа с базой данных
- **PostgreSQL** (продакшн) / SQLite (разработка)
- **WebSocket** - реальное время
- **Telegraf** - Telegram Bot API
- **JWT** - аутентификация
- **Helmet** - безопасность
- **Morgan** - логирование

### Инфраструктура
- **pnpm** - менеджер пакетов
- **ESLint** - линтинг
- **TypeScript** - типизация
- **Render/Railway** - деплой

## 4. 📂 Архитектура и структура проекта

```
fastmine/
├── client/                    # Frontend (React + Vite)
│   ├── src/
│   │   ├── components/        # React компоненты (71 файл)
│   │   ├── pages/            # Страницы приложения (31 файл)
│   │   ├── hooks/            # Кастомные хуки (23 файла)
│   │   ├── lib/              # Утилиты и API клиент
│   │   ├── types/            # TypeScript типы
│   │   └── utils/            # Вспомогательные функции
│   ├── public/               # Статические файлы
│   └── dist/                 # Собранный фронтенд
├── server/                   # Backend (Node.js + Express)
│   ├── src/
│   │   ├── controllers/      # Контроллеры API (20 файлов)
│   │   ├── routes/           # Маршруты API (17 файлов)
│   │   ├── websocket/        # WebSocket сервер
│   │   ├── utils/            # Утилиты и хелперы
│   │   └── services/         # Бизнес-логика
│   ├── prisma/               # Схема БД и миграции
│   └── dist/                 # Собранный бэкенд
├── scripts/                  # Скрипты деплоя и утилиты
└── docs/                     # Документация
```

**Связи между модулями:**
- Frontend ↔ Backend через REST API + WebSocket
- Backend ↔ Database через Prisma ORM
- Backend ↔ Telegram через Bot API
- Frontend ↔ Telegram через WebApp API

## 5. ⚙️ Основной функционал

### Frontend функции:
- **Аутентификация** через Telegram WebApp
- **Главная страница** с балансом и навигацией
- **Майнинг слоты** - покупка, просмотр, управление
- **Реферальная система** - приглашения, статистика
- **Лотерея** - покупка билетов, розыгрыши
- **Админ-панель** - управление системой (только для админов)

### Backend функции:
- **API сервер** - REST эндпоинты
- **WebSocket сервер** - реальное время
- **Telegram Bot** - интеграция с Telegram
- **Обработка слотов** - расчет доходности
- **Реферальная система** - начисления комиссий
- **Лотерея** - розыгрыши и призы
- **Админ функции** - управление пользователями
- **Безопасность** - аутентификация, валидация

## 6. 🔗 API и взаимодействие с сервером

### Основные эндпоинты:

**Аутентификация:**
- `POST /api/login` - вход через Telegram
- `POST /api/auth/telegram` - верификация Telegram данных

**Пользователь:**
- `GET /api/user/:telegramId/data` - данные пользователя
- `GET /api/user/:telegramId/stats` - статистика
- `POST /api/user/:telegramId/claim` - получение доходов

**Слоты:**
- `GET /api/user/:telegramId/slots` - список слотов
- `POST /api/user/:telegramId/slots/buy` - покупка слота
- `GET /api/user/:telegramId/real-time-income` - доходность в реальном времени

**Рефералы:**
- `GET /api/user/:telegramId/referrals` - реферальная статистика
- `GET /api/user/:telegramId/referral-list` - список рефералов

**Лотерея:**
- `GET /api/lottery/status` - статус лотереи
- `POST /api/lottery/buy-ticket` - покупка билета
- `GET /api/lottery/tickets/:telegramId` - билеты пользователя

**Админ:**
- `GET /api/admin/dashboard` - админ дашборд
- `GET /api/admin/users` - список пользователей
- `POST /api/admin/users/:id/freeze` - заморозка аккаунта

**WebSocket:**
- `ws: //localhost:10112/ws` - подключение для реального времени

### Модели данных:
```typescript
User {
  id, telegramId, username, firstName, lastName
  role, referralCode, referredById
  totalInvested, wallets[], miningSlots[]
  activityLogs[], referrals[]
}

MiningSlot {
  id, userId, principal, accruedEarnings
  startAt, lastAccruedAt, expiresAt
  effectiveWeeklyRate, isActive, isLocked
}

Wallet {
  id, userId, currency, balance
}

Lottery {
  id, drawDate, jackpot, isDrawn
  winningNumbers, tickets[]
}
```

## 7. 💾 Работа с данными

### База данных:
- **PostgreSQL** (продакшн, разработка)
- **Prisma ORM** - типизированный доступ к БД
- **Миграции** - версионирование схемы

### Основные таблицы:
- `User` - пользователи (77 полей,
10 индексов)
- `MiningSlot` - майнинг слоты
- `Wallet` - кошельки пользователей
- `ActivityLog` - журнал активности
- `Lottery` / `LotteryTicket` - лотерея
- `Task` / `CompletedTask` - задания
- `ExchangeRate` - курсы валют
- `Notification` - уведомления
- `ReferralEarning` - реферальные доходы
- `Withdrawal` - выводы средств

### Кэширование:
- **React Query** - кэширование API запросов
- **LocalStorage** - локальное хранение состояния
- **WebSocket** - реальное время без кэша

## 8. 💡 Логика и пользовательские сценарии

### Основной пользовательский сценарий:

1. **Регистрация:**
   - Пользователь открывает бота в Telegram
   - Нажимает "Запустить WebApp"
   - Система создает аккаунт с приветственным бонусом 3 FST
   - Автоматически создается приветственный слот на 7 дней

2. **Майнинг:**
   - Пользователь покупает слоты за FST
   - Каждый слот дает 30% доходности в неделю
   - Доходы накапливаются в реальном времени
   - Можно получить доходы кнопкой "Claim"

3. **Реферальная система:**
   - Пользователь приглашает друзей по реферальной ссылке
   - Получает 25% от доходов реферала 1-го уровня
   - Получает 15% от доходов реферала 2-го уровня
   - Бонусы за регистрацию и депозиты рефералов

4. **Лотерея:**
   - Ежедневные розыгрыши
   - Покупка билетов за 1 USD
   - Призы: 70% джекпота за 6 совпадений

5. **Вывод средств:**
   - Минимум 3 FST для вывода
   - Требуется 3 реферала
   - Админское одобрение

### Админские сценарии:
- Просмотр статистики пользователей
- Заморозка/разморозка аккаунтов
- Управление курсами валют
- Проведение лотерей
- Мониторинг системы


## 10. 🚀 Рекомендации по переписыванию

### Архитектурные улучшения:
1. **Микросервисная архитектура:**
   - Отдельный сервис для пользователей
   - Отдельный сервис для майнинга
   - Отдельный сервис для лотереи
   - API Gateway для маршрутизации

2. **Слой сервисов:**
   - `UserService` - управление пользователями
   - `MiningService` - логика майнинга
   - `ReferralService` - реферальная система
   - `LotteryService` - лотерея

3. **Event-driven архитектура:**
   - События для уведомлений
   - Асинхронная обработка
   - Message Queue (Redis/RabbitMQ)

### Технологические улучшения:
1. **Backend:**
   - **NestJS** вместо Express (лучшая архитектура)
   - **Bull Queue** для фоновых задач
   - **Swagger** для документации API

2. **Frontend:**
   - **Next.js** для SSR/SSG
   - **Zustand** вместо React Query (проще)
   - **React Hook Form** для форм
   - **Storybook** для компонентов
   - **Cypress** для E2E тестов

3. **База данных:**
   - **PostgreSQL** с оптимизированными индексами
   - **Prisma** с улучшенными запросами

## 11. 🧱 Итоговая структура нового проекта

```
NONMINE-v2/
├── apps/
│   ├── api-gateway/           # API Gateway (NestJS)
│   ├── user-service/          # Сервис пользователей
│   ├── mining-service/        # Сервис майнинга
│   ├── lottery-service/       # Сервис лотереи
│   ├── notification-service/  # Сервис уведомлений
│   └── web/                   # Frontend (Next.js)
├── libs/
│   ├── shared/                # Общие типы и утилиты
│   ├── database/              # Prisma схема
│   ├── auth/                  # Аутентификация
│   └── events/                # Event system
├── infrastructure/
│   ├── docker/                # Docker конфигурации
│   ├── k8s/                   # Kubernetes манифесты
│   └── terraform/             # Infrastructure as Code
├── tools/
│   ├── scripts/               # Скрипты разработки
│   └── docs/                  # Документация
└── packages/
    ├── ui/                    # UI компоненты
    ├── utils/                 # Утилиты
    └── types/                 # TypeScript типы
```

### Ключевые компоненты:

**API Gateway:**
- Маршрутизация запросов
- Аутентификация
- Rate limiting
- Логирование

**User Service:**
- Регистрация/авторизация
- Профили пользователей
- Реферальная система
- Кошельки

**Mining Service:**
- Создание слотов
- Расчет доходности
- Автоматические выплаты
- Статистика

**Lottery Service:**
- Управление лотереями
- Розыгрыши
- Билеты
- Призы

**Web Frontend:**
- Next.js с App Router
- Server Components
- Real-time updates
- PWA поддержка

### Преимущества новой архитектуры:
1. **Масштабируемость** - независимые сервисы
2. **Надежность** - изоляция отказов
3. **Производительность** - оптимизированные запросы
4. **Безопасность** - централизованная аутентификация
5. **Разработка** - независимые команды
6. **Тестирование** - изолированные тесты
7. **Деплой** - независимые релизы


[
  1 tool called
]

---

## Заключение

Я провел полный анализ вашего проекта **NONMINE** и создал детальный паспорт приложения. Проект представляет собой сложную финансовую симуляцию с майнингом, реферальной системой и лотереей, интегрированную в Telegram WebApp.

**Ключевые выводы:**
- Проект функционально богатый, но архитектурно устаревший
- Монолитная структура затрудняет масштабирование
- Есть проблемы с производительностью и безопасностью
- Код требует рефакторинга и модернизации

**Рекомендация:** Переписать проект с нуля, используя современную микросервисную архитектуру, NestJS для бэкенда, Next.js для фронтенда, и добавить Redis для кэширования и очередей.

Этот паспорт даст вам полное понимание текущего состояния проекта и четкий план для создания улучшенной версии с тем же функционалом, но на современной технологической базе.
